#encoding UTF-8
#import zoo
#import mapscript
#import mapfile.service as mms
#import mm_access
#set mapfile=$conf["main"]["dataPath"]+"/public_maps/project_"+$conf["senv"]["last_map"]+".map"
#set m=mapscript.mapObj($mapfile)
#if $mms.getMetadata($m.web,'mmNav')
#set nav=$mms.getMetadata($m.web,'mmNav').split(',')
#else
#set nav=[]
#end if
var map;
var mybounds, markers, layer, osm, gsat, geolocation, mapControls, loadingPanel;
var wgs84,mercator;
var gfiControl;
var firstGeolocation = true;

var geocoder;
System.loading_progress=0;
System.toLoad=0;
System.loaded=0;
System.flexi_cnt=0
System.ProcessLayers=[]

#if $mms.getMetadata($m.web,"tprj") and $mms.getMetadata($m.web,"tprj")!=""
#import sqlite3
#set conn = sqlite3.connect($conf['main']['dblink'])
#set c = $conn.cursor()
#set i=$c.execute(" SELECT code,proj4str FROM spatial_ref_sys WHERE fav and code='"+$mms.getMetadata($m.web,"tprj")+"'")
#set a=$c.fetchall()
#for i in $a
Proj4js.defs["$i[0]"]="$i[1]";
#end for
#end if

#if $mms.getMetadata($m.web,"mmActivatedLayers") is not None
#set res=[]
#for i in $mms.getMetadata($m.web,"mmActivatedLayers").split(',')
#if $i!="" and $mm_access.checkLayerPriv($conf,$m,$i,"r")
#set $res+=[i]
#end if
#end for
  System.activatedLayers=$res;
#else
  System.activatedLayers=[];
#end if

#if $mms.getMetadata($m.web,"vectorLayers") is not None
  System.vectorLayers=$mms.getMetadata($m.web,"vectorLayers").split(',');
#else
  System.vectorLayers=[];
#end if

var vtLayers={};
#for i in range($m.numlayers)
#if $mm_access.checkLayerPriv($conf,$m,$m.getLayer($i).name,"r")
#if $mms.getMetadata($m.getLayer(i),"mmQuery") and $mms.getMetadata($m.getLayer(i),"mmQuery")=="true"
#if $mm_access.checkLayerPriv($conf,$m,$m.getLayer($i).name,"x")
vtLayers["$m.getLayer(i).name"]=true;
#else
vtLayers["$m.getLayer(i).name"]=false;
#end if
#else
vtLayers["$m.getLayer(i).name"]=false;
#end if
#end if
#end for

var svtLayers={};
#for i in range($m.numlayers)
#if $mm_access.checkLayerPriv($conf,$m,$m.getLayer($i).name,"r")
#if $mms.getMetadata($m.getLayer(i),"mmSpatialQuery") and $mms.getMetadata($m.getLayer(i),"mmSpatialQuery")=="true" and ($mms.getMetadata($m.getLayer(i),"mmSpatialQueryType")=="both" or $mms.getMetadata($m.getLayer(i),"mmSpatialQueryType")=="contains" )
#if $mm_access.checkLayerPriv($conf,$m,$m.getLayer($i).name,"x")
svtLayers["$m.getLayer(i).name"]=true;
#else
svtLayers["$m.getLayer(i).name"]=false;
#end if
#else
svtLayers["$m.getLayer(i).name"]=false;
#end if
#end if
#end for


function progress1() {
    \$('#progress_bar .ui-progress').animateProgress(Math.round(((System.loaded-System.toLoad)*100)/System.loaded));
    \$('#progress_bar .ui-progress').animateProgress(Math.round(((System.loaded-System.toLoad)*100)/System.loaded));
}


function registerLoadEvents(layer) {
    layer.events.register("loadstart", layer, function() {
	System.loaded++;
	System.toLoad++;
	\$("#loading").show();
	//progress1();
    });
    layer.events.register("tileloaded", layer, function() { 
	var txt="<ul>";
	var tmp=0;
	for(var i=0;i<this.map.layers.length;i++){
	    if(this.map.layers[i].visibility){
		if(this.map.layers[i].numLoadingTiles>0)
		    txt+="<li>"+this.map.layers[i].name + " (" + this.map.layers[i].numLoadingTiles + " left)</li>";
		tmp+=this.map.layers[i].numLoadingTiles;
	    }
	}
	txt+="</ul>";
	\$('#progress_txt').html(txt);
	if(tmp==0)
	    \$("#loading").hide();
    });
    layer.events.register("loadend", layer, function() {
	doOnLayerLoad();
    });
    layer.events.register("loadcancel", layer, function() {
	doOnLayerLoad();
    });
}

function doOnLayerLoad(){
    System.toLoad--;
    //progress1();
    if(System.toLoad<=0){
	System.loaded=0;
	System.toLoad=0;
	\$("#loading").hide();
	/*\$('#progress_bar .ui-progress').animateProgress(100, function() {
	  \$("#loading").hide();
	  });*/
    }
}

var wgs84;
var mercator;

function gotoMaxExtent(){
    map.zoomToExtent(System.bounds);
}

function init(){

    $.ajaxSetup({data: {language: "$conf["main"]["language"]"}});

    tinit();
#if $mms.getMetadata($m.web,'layout_t')!="mobile"
    \$("#layers_list").tree({
	checkbox: true,
	onCheck: function(node, checked){
	    try{
		layersList[node.id.replace(/layer_/,"")].setVisibility(checked);
	    }catch(e){
		var a=\$("#layers_list").tree('getChildren',node.target);
		for(var i=0;i<a.length;i++){
		    try{
			layersList[a[i].id.replace(/layer_/,"")].setVisibility(checked);
		    }catch(e){
			var b=\$("#layers_list").tree('getChildren',a[i].target);
			for(var j=0;j<b.length;j++){
			    try{
				layersList[b[j].id.replace(/layer_/,"")].setVisibility(checked);
			    }catch(e){}
			}
		    }
		}
	    }
	},
	onContextMenu: function(e, node){
	    if(node.target==\$("#layers_list").tree('getRoot').target){
		try{
		    e.preventDefault();
		    \$("#layers_list").tree('select', node.target);
		    System.mmNodeId=node.id;
		    \$('#ltm0').emenu('show', {
			left: e.pageX,
			top: e.pageY
		    });
		}catch(e){alert(e);}
	    }
	    else if(node.id){
		try{
		    e.preventDefault();
		    \$("#layers_list").tree('select', node.target);
		    System.mmNodeId=node.id;
		    initOSlider();
		    var max=node.id.replace(/layer_/g,"");
		    var cnt=0;
		    var hasVal=false;
		    for(var i in pmapfiles){
			if(cnt==max && pmapfiles[i][pmapfiles[i].length-2]){
			    \$('#ltm1').emenu('show', {
				left: e.pageX,
				top: e.pageY
			    });
			    hasVal=true;
			    break;
			}
			cnt++;
		    }
		    if(!hasVal)
			\$('#ltm').emenu('show', {
			    left: e.pageX,
			    top: e.pageY
			});
		}catch(e){}
	    }
	}
    });
    \$(".tree_layer_class").next().hide();
    try{
	\$(".base_layer").tipsy({fade: true, offset:5, opacity: 1, gravity: 'ne'});
    }catch(e){}
#end if  
    wgs84=new OpenLayers.Projection("EPSG:4326");
    mercator=new OpenLayers.Projection("EPSG:900913");

#if $mms.getMetadata($m.web,"max_minx")
    mybounds = new OpenLayers.Bounds($mms.getMetadata($m.web,"max_minx"),$mms.getMetadata($m.web,"max_miny"),$mms.getMetadata($m.web,"max_maxx"),$mms.getMetadata($m.web,"max_maxy"));
#else
    mybounds = new OpenLayers.Bounds(-179.99999692067183,-85.05112851416298,179.99999692067183,85.05112851416298);
#end if

    var myboundsOrig=mybounds;
    mybounds=mybounds.transform(wgs84,mercator);
    System.bounds=mybounds;
    map = new OpenLayers.Map('map', {
#if len($nav)>0
	controls: [new OpenLayers.Control.Navigation({'zoomWheelEnabled': #if $nav.count("scroll")>0#true#else#false#end if#})],
    	displayProjection: new OpenLayers.Projection("EPSG:4326"),
    	projection: new OpenLayers.Projection("EPSG:900913"),
#end if
    	units: "m",
	tileManager: null,
	fallThrough: true,
	zoomMethod: null,
#if $mms.getMetadata($m.web,'mmRestricted')=="true"
    	restrictedExtent: mybounds,
	maxExtent: mybounds
#else
	maxResolution: 156543.0339,
	maxExtent: new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34) 
#end if
    });

    var styleMap = new OpenLayers.StyleMap({
	"default": new OpenLayers.Style(null, {
            rules: [new OpenLayers.Rule({
		symbolizer: {
                    "Point": {
			pointRadius: 4,
			graphicName: "circle",
			fillColor: "white",
			fillOpacity: 1,
			strokeWidth: 2,
			strokeOpacity: 1,
			strokeColor: "#808080"
                    },
                    "Line": {
			strokeWidth: 2,
			strokeOpacity: 1,
			strokeColor: "#808080",
			strokeDashstyle: "dash"
                    },
                    "Polygon": {
			strokeWidth: 2,
			strokeOpacity: 1,
			strokeColor: "#808080",
			strokeDashstyle: "dash",
			fillColor: "white",
			fillOpacity: 0.3
                    }
		}
            })]
	})
    });

    startOverlay();

    map.events.register("zoomend", null, updateSlider);

#if len($nav)>0
#if nav.count('getFeatureCircle')>0 and $mm_access.checkMapNavPriv($conf,$m,"getFeatureCircle")
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/getFeatureCircle/_init.js",searchList={"m": $m,"conf":$conf}))	    
#end if
#if nav.count('getFeature')>0 and $mm_access.checkMapNavPriv($conf,$m,"getFeature")
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/getFeature/_init.js",searchList={"m": $m,"conf":$conf}))	    
#end if
#end if
    mapControls = {
    	zoomin: new OpenLayers.Control.ZoomBox({title:"Zoom in box", out: false})
#if len($nav)>0
#if nav.count('geolocate')>0 and $mm_access.checkMapNavPriv($conf,$m,"geolocate")
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/geolocation/control.js",searchList={"m": $m,"conf":$conf}))
#end if
#if nav.count('getFeature')>0 and $mm_access.checkMapNavPriv($conf,$m,"getFeature")
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/getFeature/control.js",searchList={"m": $m,"conf":$conf}))
#end if
#if nav.count('getFeatureCircle')>0 and $mm_access.checkMapNavPriv($conf,$m,"getFeatureCircle")
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/getFeatureCircle/control.js",searchList={"m": $m,"conf":$conf}))
#end if
#if nav.count('profile_line')>0 and $mm_access.checkMapNavPriv($conf,$m,"profile_line")
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/profile/control.js",searchList={"m": $m,"conf":$conf}))	    
#end if
#if nav.count('line')>0 and $mm_access.checkMapNavPriv($conf,$m,"line")
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/measure/line/control.js",searchList={"m": $m,"conf":$conf}))	    
#end if
#if nav.count('polygon')>0 and $mm_access.checkMapNavPriv($conf,$m,"polygon")
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/measure/polygon/control.js",searchList={"m": $m,"conf":$conf}))	    
#end if
#end if
      };

    map.events.register("mousemove", map, function(e) {
  	var pixel = new OpenLayers.Pixel(e.xy.x,e.xy.y);
  	var lonlat = map.getLonLatFromPixel(pixel);  
	System.lonlat=map.getLonLatFromPixel(pixel);
	var lonlatGCS = lonlat.transform(map.getProjectionObject(),new OpenLayers.Projection("#if $mms.getMetadata($m.web,'tprj')#$mms.getMetadata($m.web,'tprj')#else#EPSG:4326#end if#")); 
#if $mms.getMetadata($m.web,'mmOT')
#set f0=$mms.getMetadata($m.web,'mmOT').split(',')
#if f0.count('MousePosition')>0
        OpenLayers.Util.getElement("coords").innerHTML = '' + Math.round(lonlatGCS.lon*100)/100 + ', ' + Math.round(lonlatGCS.lat*100)/100;
#end if
#else 
#set f0=[]
#end if
    });

#if $mms.getMetadata($m.web,"default_minx")
    var tmp=new OpenLayers.Bounds($mms.getMetadata($m.web,"default_minx"),$mms.getMetadata($m.web,"default_miny"),$mms.getMetadata($m.web,"default_maxx"),$mms.getMetadata($m.web,"default_maxy"));
    map.zoomToExtent(tmp.transform(
	new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
	map.getProjectionObject() // to Spherical Mercator Projection
    ));
#else
    var tmp=new OpenLayers.LonLat(0,45);
    tmp=tmp.transform(
	new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
	map.getProjectionObject() // to Spherical Mercator Projection
    );		    
    map.setCenter(tmp,2);
#end if
  
#if $conf["senv"]["last_map"]=='indicateurs'
#include($conf["main"]["templatesPath"]+"/preview/modules/indexes/init.js")
#end if

    for(var j=0;j<System.postMap.length;j++){
  	System.postMap[j].func();
    }

#if $f0.count('AddLayer')>0 or $f0.count('AddWMSLayer')>0
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/addLayer/_init.js",searchList={"m": $m,"conf":$conf}))
#end if

#for i in ["other_tools","timeline"]
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/"+$i+"/_init.js",searchList={"m": $m,"conf":$conf}))
#end for

#if $nav.count('geolocate')>0
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/geolocation/_init.js",searchList={"m": $m,"conf":$conf}))
#end if

    tend();
#if $mms.getMetadata($m.web,'mmOT') and $mms.getMetadata($m.web,'mmOT').count('Routing')>0
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/routing/_init.js",searchList={"m": $m,"conf":$conf}))
#end if
    checkForScales();

#if 'default_extent' in $conf["senv"].keys() and $conf["senv"]["last_map"]!="Default"
    var tmp0=new OpenLayers.Bounds($conf["senv"]["default_extent"]);
    if(!System.hasExtent)
	map.zoomToExtent(tmp0.transform(new OpenLayers.Projection("EPSG:4326"),map.getProjectionObject()));
#end if

    if(System.context){
      loadContext(System.context);
    }
    else if(System.hasIIndexes && System.index){
      System.limitLayer=layersList.length;
      System.doOnCurrentIndexChange=function(){loadIndex(System.index);};
      setCurrentIndex(System.index);
    }

}

// init() ends

function checkForScales(){
     var tmpScale=map.getScale();
     var j=0;
     for(var i in pmapfiles){
     	if(tmpScale < pmapfiles[i][3] && tmpScale > pmapfiles[i][4]){
		\$("div[node-id='layer_"+j+"']").removeClass("nodisplay");
	}else
		\$("div[node-id='layer_"+j+"']").addClass("nodisplay");
	j+=1;
     }
}

$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/export/init.js",searchList={"m": $m,"conf": $conf}))

#if $mms.getMetadata($m.web,'mmOT') and $mms.getMetadata($m.web,'mmOT').count('Routing')>0
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/routing/init.js",searchList={"m": $m,"conf": $conf}))
#end if

#if $f0.count('AddLayer')>0 or $f0.count('AddWMSLayer')>0
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/addLayer/init.js",searchList={"m": $m,"conf": $conf}))
#end if

#if len($nav)>0
#if $nav.count('authenticate')>0
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/auth/init.js",searchList={"m": $m,"conf":$conf}))
#end if

#if $nav.count('profile_line')>0
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/profile/init.js",searchList={"m": $m,"conf":$conf}))
#end if

#if $nav.count('fshare')>0 or $nav.count('permalink')>0 or $nav.count('tshare')>0
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/sharing/init.js",searchList={"m": $m,"conf":$conf}))
#end if

#if $nav.count('polygon')>0 or $nav.count('line')>0
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/measure/init.js",searchList={"m": $m,"conf":$conf}))
#end if

#end if


	
function zoomto(x,y,z) {
    var point = new OpenLayers.LonLat(x,y);
    point.transform(wgs84,map.getProjectionObject());
    map.setCenter(point, z);
}



 function updateSlider() {
              try{\$( "span.slider" ).slider( "option", "value", map.getZoom() );}catch(e){}
	      checkForScales();
        }
        
        
function toggleControl(element) {
  var cname=element.name;
  if(cname=="track")
	cname="geolocate";
  if(cname=="authenticate"){
	try{loadLoginForm();return;}
	catch(e){alert("ERROR MSG :"+e);}
  }
  for(key in mapControls) {
    var control = mapControls[key];
    if(cname == key #if $mms.getMetadata($m.web,'layout_t')!="mobile"#&& \$(element).is('.ui-state-active')#end if#) {
      if(cname == "geolocate"){
    	try{geolocation.removeAllFeatures();}catch(e){}
	if(element.name == "track")
		mapControls.geolocate.watch = true;
	firstGeolocation = true;
      }
      map.addControl(control);
      control.activate();
    } else {
      if(key == "geolocate" && cname!="geolocate" && cname!="search"){
    	try{geolocation.removeAllFeatures();}catch(e){}
      }
      control.deactivate();
      if(control.box)
	control.box.deactivate();
    }
  }
  try{
  //if(cname!="draw_points" && cname!="drag_points")
          map.addControl(tselect[tselect.length-1]);
	  tselect[tselect.length-1].activate();
	  //alert(map.getLayerIndex(System.hover)+" "+map.layers.length);
  }catch(e){}
}



     
\$(function(){
    \$(".fg-button:not(.ui-state-disabled)")
	.hover(
	    function(){ 
		\$(this).addClass("ui-state-hover"); 
	    },
	    function(){ 
		\$(this).removeClass("ui-state-hover"); 
	    }
	)
	.mousedown(function(){
	if(!(\$(this).find("span").is('.zoomtomaxextent')) &&
 	   !(\$(this).find("span").is('.print')) &&
	   !(\$(this).find("span").is('.geolocate'))){
	    \$(this).parents('.fg-buttonset-single:first').find(".fg-button.ui-state-active").removeClass("ui-state-active");
	    if( \$(this).is('.ui-state-active.fg-button-toggleable, .fg-buttonset-multi .ui-state-active') ){ \$(this).removeClass("ui-state-active"); }
	    else { \$(this).addClass("ui-state-active"); }
	}	
	})
	.mouseup(function(){
	    if(! \$(this).is('.fg-button-toggleable, .fg-buttonset-single .fg-button,  .fg-buttonset-multi .fg-button') ){
		\$(this).removeClass("ui-state-active");
	    }
	});
});  

\$(function(){
    \$(".ls-button:not(.ui-state-disabled)")
	.hover(
	    function(){ 
		\$(this).addClass("ui-state-hover"); 
	    },
		function(){ 
		    \$(this).removeClass("ui-state-hover"); 
		}
	)
	.mousedown(function(){
	    \$(this).parents('.ls-buttonset-single:first').find(".ls-button.ui-state-active").removeClass("ui-state-active");
	    if( \$(this).is('.ui-state-active.ls-button-toggleable, .ls-buttonset-multi .ui-state-active') ){ \$(this).removeClass("ui-state-active"); }
	    else { \$(this).addClass("ui-state-active"); }	
	})
	.mouseup(function(){
		if(! \$(this).is('.ls-button-toggleable, .ls-buttonset-single .ls-button,  .ls-buttonset-multi .ls-button') ){
		    \$(this).removeClass("ui-state-active");
		}
	});
});   

\$(function(){
    try{
	\$('select#speedC').selectmenu({style:'dropdown'});
	\$('select#print-options').selectmenu({style:'dropdown'});
    }catch(e){}
});

        	    

\$(document).ready(function() {
    
#if ["natureparif-indicateur","fullscreen"].count($mms.getMetadata($m.web,'layout'))>0
    \$("#layerswitcher").toggle();
#end if
    
    \$("#overviewmap").hide();
    

    \$(".ov-toogler").click(function () {
	\$("#overviewmap").show();
	\$("#ov-dialog").window({
	    width:248,
	    height:174,
	    top: \$(window).height()-244,
	    left: \$(window).width()-258,
	    collapsible: false,
	    maximizable:false,
	    minimizable:false,
	    resizable:false
	});   
    });  
    


    \$(".hp-toogler").click(function () {
	
	
	$.ajax({
            type: "GET",
            url: "help",
            complete: function(xml,status) {
		if(\$("#hp-dialog").length>0){
                    \$("#hp-dialog").window('close');
                    \$("#hp-dialog").remove();
		}
		\$("body").append('<div id="hp-dialog" title="$zoo._("Help")"></div>');
		\$("#hp-dialog").html(xml.responseText);
		\$( "#hp-dialog" ).window({
        	    width:400,
        	    height:400,
        	    left:10,
        	    top:100,
        	    collapsible: false,
        	    maximizable:false,
        	    minimizable:false,
       		    resizable:false
		});
		\$("#tabs-hp li").click(function() {
		    \$("#tabs-hp li").removeClass('active');
		    \$(this).addClass("active");
		    \$(".tab_content-hp").hide();
		    var selected_tab = \$(this).find("a").attr("href");
		    \$(selected_tab).fadeIn();
		});
            }
	});
	
    });
    


#if $mms.getMetadata($m.web,'layout_t')!="mobile"
    try{
	\$('.fg-toolbar a').tipsy({fade: true, offset:2, opacity: 1, gravity: 'nw'});
	\$('.toolbar-noborder a').tipsy({fade: true, offset:3, opacity: 1, gravity: 'nw'});
    }catch(e){}
#end if


    \$(".print").click(function () {
 	
	\$('#print-window').window( 	{
	    collapsible:false,
	    minimizable:false,
	    maximizable:false,
	    draggable:true,
	    resizable: false
	});	 	
	
	\$('#print-window').window('open'); 
    }); 
    
    
    \$(".edit-toolbar").click(function () {
	
	\$( "#editing-toolbar" ).window({
	    collapsible:false,
	    minimizable:false,
	    maximizable:false,
	    draggable:true,
	    resizable: false
	    
	});	
	\$('#editing-toolbar').window('open'); 
    });
    
    \$(".spatial-toolbar").click(function () {
	
	\$( "#spatial-toolbar" ).window({
	    collapsible:false,
	    minimizable:false,
	    maximizable:false,
	    draggable:true,
	    resizable: false
	    
	});	
	\$('#spatial-toolbar').window('open'); 
    });

    \$(".raster-toolbar").click(function () {
	
	\$( "#raster-toolbar" ).window({
	    collapsible:false,
	    minimizable:false,
	    maximizable:false,
	    draggable:true,
	    resizable: false
	    
	});	
	\$('#raster-toolbar').window('open'); 
    });
    
    \$(".terrain-toolbar").click(function () {
	
	\$( "#terrain-toolbar" ).window({
	    collapsible:false,
	    minimizable:false,
	    maximizable:false,
	    draggable:true,
	    resizable: false
	    
	});	
	\$('#terrain-toolbar').window('open'); 
    });
    
    
    
    
    \$(function() { 
	
	\$("select#speedC").change(function() { 
	    
	    var x1 = \$(this).find("option:selected").attr("value").split(',')[0];
	    var y1 = \$(this).find("option:selected").attr("value").split(',')[1];
	    var z1 = \$(this).find("option:selected").attr("value").split(',')[2];
	    zoomto(x1,y1,z1)
	    
	});
	
    });
        
    \$(".dialog-export").hide();
    \$(".export").click(function () {
	try{
	    startExport();
	}catch(e){}
    });
    
    \$(".zoomTo").click(function () {
	try{
	    var i=System.mmNodeId.replace(/layer_/,"");
	    var bounds = new OpenLayers.Bounds(
		layersList[i].mmLc[0], layersList[i].mmLc[1],
		layersList[i].mmUc[0], layersList[i].mmUc[1]
	    );
	    var proj=new OpenLayers.Projection("EPSG:4326");
	    map.zoomToExtent(bounds.transform(proj, map.getProjectionObject()));
	}catch(e){}
    });
    
  });
// end ready


function singleGeom() {
    var aProcess=arguments[1];
    var tmpId=finalLayers[(arguments[0]*4)]?(arguments[0]*4):0;
    
    if (finalLayers[tmpId+2].features.length == 0)
	return alert("No feature selected!");
    
    var started=true;
    var dep=finalLayers[tmpId+3];
    
    var url = zooUrl+'?request=Execute&service=WPS&version=1.0.0&';
    if (aProcess == 'BufferPy' || aProcess == 'BufferMask' || aProcess == 'SpatialQuery') {
	var dist = document.getElementById(arguments[0]+'_buffer-value')?document.getElementById(arguments[0]+'_buffer-value').value:'1';
	if (isNaN(dist))
	    return alert("Distance is not a Number!");
	url+='Identifier=vector-tools.'+aProcess+'&DataInputs='+((aProcess == 'SpatialQuery')?"layer="+\$("#"+arguments[0]+"_spatial-query-choice").val()+";":"")+'BufferDistance='+(dist/#if $mms.getMetadata($m.web,'tuom')=="metric"#111120#else##if $mms.getMetadata($m.web,'tuom')=="geographic"#1#else#(111120/0.3048)#end if##end if#)+'@datatype=interger;'+(aProcess=="BufferMask" || aProcess=="SpatialQuery"?'InputData':'InputPolygon')+'=Reference@xlink:href=';
    } else
	if(aProcess == "SimpleBBOX" || aProcess == "SimpleChain" || 
	   aProcess == "Mask" || aProcess == "BufferMask" || 
	   aProcess == "BufferRequest" || 
	   aProcess == "SimpleChain1" || aProcess == "SimpleChain2")
	    url += 'Identifier='+(aProcess == "SimpleChain2"?"BufferRequest":aProcess)+'&DataInputs=InputData=Reference@xlink:href=';
    else
	if(aProcess == 'SpatialQuery')
	    url += 'Identifier='+aProcess+'&DataInputs=layer='+\$("#"+arguments[0]+"_spatial-query-choice").val()+';InputData=Reference@xlink:href=';
    else
	url += 'Identifier='+aProcess+'&DataInputs=InputPolygon=Reference@xlink:href=';
    var xlink = msUrl +"?map="+mapPath+"/search_"+mapProject+"_"+arguments[2]+".map&SERVICE=WFS&REQUEST=GetFeature&VERSION=1.0.0";
    xlink += '&typename='+arguments[2];
    
    xlink += '&FeatureID=';
    
    for(var i=0;i<finalLayers[tmpId+2].features.length;i++)
	xlink += (i>0?",":"") + finalLayers[tmpId+2].features[i].fid;
    url += encodeURIComponent(xlink);
    url += '&RawDataOutput=Result@mimeType=application/json';
    
    var request = new OpenLayers.Request.XMLHttpRequest();
    request.open('GET',url,true);
    request.onreadystatechange = function() {
	if(request.readyState == OpenLayers.Request.XMLHttpRequest.DONE) {
	    var GeoJSON = new OpenLayers.Format.GeoJSON();
	    var features = GeoJSON.read(request.responseText);
	    processResultLayer.removeFeatures(processResultLayer.features);
	    for(var j in features)
      		if(features[j].geometry){
		    features[j].geometry=features[j].geometry.transform(wgs84,map.getProjectionObject());
		}
	    processResultLayer.addFeatures(features);
	}
    }
    request.send();
    
}


var pulsate = function(feature) {
    var point = feature.geometry.getCentroid(),
    bounds = feature.geometry.getBounds(),
    radius = Math.abs((bounds.right - bounds.left)/2),
    count = 0,
    grow = 'up';
    
    var resize = function(){
        if (count>16) {
            clearInterval(window.resizeInterval);
        }
        var interval = radius * 0.03;
        var ratio = interval/radius;
        switch(count) {
        case 4:
        case 12:
            grow = 'down'; break;
        case 8:
            grow = 'up'; break;
        }
        if (grow!=='up') {
            ratio = - Math.abs(ratio);
        }
        feature.geometry.resize(1+ratio, point);
        geolocation.drawFeature(feature);
        count++;
    };
    window.resizeInterval = window.setInterval(resize, 50, point, radius);
};

var style = {
    fillColor: '#000',
    fillOpacity: 0.1,
    strokeWidth: 0
};

function tend(){};
function tinit(){};

var urlContext;
function saveContext(func){
    var params=[{name: "extent",value:map.getExtent().transform(mercator,wgs84),dataType: "string"}];
    for(i in map.layers)
	if(map.layers[i].real_name && map.layers[i].visibility){
	    params[params.length]={name: "layers",value:map.layers[i].real_name,dataType: "string"};
	}
    
#if $mms.getMetadata($m.web,'mmOT') and $mms.getMetadata($m.web,'mmOT').count('Routing')>0
    if(route_layer){
        System.params=params;
	System.func1=func;
        System.toCall=function(response){
	    var tmp="$(conf["main"]["applicationAddress"])load/$(conf["senv"]["last_map"])/";
	    var tmpName=response.replace(tmp,"");
	    params[params.length]={name: "layers",value:"trac|"+tmpName,dataType: "string"};
	    _saveContext(System.params,System.func1);
	};
	routingSave("anonymous");
    }else
#end if
        _saveContext(params,func);
}

function _saveContext(params,func){
    data=WPSGetHeader("context.saveContext")+WPSGetInputs(params)+WPSGetOutput({name:"Result"})+WPSGetFooter();
    $.ajax({
	type: "POST",
	url: System.zooUrl,
	contentType: 'text/xml',
	data: data,
	complete: function(xml,status) {
	    //urlContext = xml.responseText;
	    func(xml.responseText);
        }
    });
}

#if "last_index" in $conf["senv"].keys() and $conf["senv"]["last_index"]!="" and $mms.getMetadata($m.web,'layout_t')=="natureparif-indicateurs"
System.index="$conf["senv"]["last_index"]";
#end if
System.ilayers=[];
function loadIndex(){
    System.index=arguments[0];
    \$("head").append("<link>");
    css = \$("head").children(":last");
    css.attr({ 
	rel:  "stylesheet",
	type: "text/css",
	href: "./indexes_css;id="+System.index+";limit="+System.limitLayer,
	onload: function(){
	    $.ajax({
		type: "GET",
		url: "./current_index_js;id="+System.index,
		complete: function(xml,status) {
		    var node = \$("#layers_list").tree('find',"Indicateurs");
		    if(!node)
			node=\$("#layers_list").tree('find',System.data0_id);
		    \$("#layers_list").tree('pop',node.target);
		    \$('#timeliners').remove();
		    var data=\$.parseJSON(xml.responseText);
		    data[0]["id"]="layer_"+(data[0]["id"]+System.limitLayer);
		    data[0]["checked"]=true;
		    System.data0_id=data[0]["id"];
		    for(i=0;i<data[0]["children"].length;i++){
			data[0]["children"][i]["id"]="layer_class_"+(data[0]["children"][i]["id"]+System.limitLayer);
		    }
		    \$("#layers_list").tree('append',{
			parent: \$("#layers_list").tree('getRoot').target,
			data: data
		    });
		    \$(".tree_layer_class").next().hide();
		    
		    if(System.ilayers[0]){
		  	layersList[System.ilayers[0].local_ref].url="$conf["main"]["mapserverAddress"]?map=$conf["main"]["dataPath"]/indexes_maps/project_PIndex"+System.index+".map";
		  	layersList[System.ilayers[0].local_ref].params["LAYERS"]="indexes.view_idx"+System.index;
			layersList[System.ilayers[0].local_ref].setVisibility(true);
			layersList[System.ilayers[0].local_ref].redraw(true);
		    }else{
			System.ilayers[0] = new OpenLayers.Layer.WMS(
			    "Indicateurs",
			    "$conf["main"]["mapserverAddress"]?map=$conf["main"]["dataPath"]/indexes_maps/project_PIndex"+System.index+".map",
			    {layers: "indexes.view_idx"+System.index,format: "image/png"},
			    {useCanvas: System.useCanvas,isBaseLayer: false, singleTile: false}
			);
			System.ilayers[0].real_name="index_"+System.index;
			System.ilayers[0].local_id="Indicateurs";
			System.ilayers[0].setVisibility(true);
			map.addLayer(System.ilayers[0]);
			layersList.push(System.ilayers[0]);
			System.ilayers[0].local_ref=layersList.length-1;
			map.events.register('changelayer', System.ilayers[0], function(evt){
			    if(evt.property === "params") {
				for(var i=layersList.length-1;i>=0;i--){
				    if(layersList[i].name=="IndicateursFg"){
					layersList[i].setVisibility(true);
					break
				    }
				}
			    }
			});
			System.ilayers[0].events.register("tileloaded", System.ilayers[0], function() { 
			    var txt="<ul>";
			    var tmp=0;
			    for(var i=0;i<layersList.length;i++){
				if(layersList[i].visibility){
				    if(layersList[i].numLoadingTiles>0)
					txt+="<li>"+layersList[i].name + " (" + layersList[i].numLoadingTiles + " left)</li>";
				    tmp+=layersList[i].numLoadingTiles;
				}
			    }
			    txt+="</ul>";
			    \$('#progress_txt').html(txt);
			    if(tmp==0)
				\$("#loading").fadeOut();
			});
			System.ilayers[0].events.register("loadend", System.ilayers[0], function() {
			    var indexFIdx=0;
			    var indexIdx=0;
			    for(var i=layersList.length-1;i>=0;i--){
				if(layersList[i].name=="IndicateursFg"){
				    indexFIdx=i;
				    break;
				}
			    }
			    for(var i=layersList.length-1;i>=0;i--){
				if(layersList[i].name=="Indicateurs"){
				    indexIdx=i;
				    break;
				}
			    }
			    var oldUrl=layersList[indexFIdx].url;
			    layersList[indexFIdx].url=layersList[indexIdx].url;
			    layersList[indexFIdx].params["LAYERS"]=layersList[indexIdx].params["LAYERS"];
			    if(oldUrl!=layersList[indexFIdx].url){
				layersList[indexFIdx].redraw(true);
				layersList[indexFIdx].setVisibility(false);
			    }
			});
			try{
			    \$('#layers_list').tree('check',\$(".tree_cindex"+(layersList.length-1))[0].parentNode);
			}catch(e){
			    try{
				\$('#layers_list').tree('check',\$("#layer_"+(layersList.length-1))[0]);
			    }catch(e){}
			}
			
			System.ilayers[1] = new OpenLayers.Layer.WMS(
			    "IndicateursFg",
			    "$conf["main"]["mapserverAddress"]?map=$conf["main"]["dataPath"]/indexes_maps/project_PIndex"+System.index+".map",
			    {layers: "indexes.view_idx"+System.index,format: "image/png"},
			    {useCanvas: System.useCanvas,isBaseLayer: false, singleTile: false}
			);
			System.ilayers[1].real_name="IndicateursFg";
			System.ilayers[1].local_id="IndicateursFg";
			System.ilayers[1].setVisibility(true);
			map.addLayer(System.ilayers[1]);
			layersList.push(System.ilayers[1]);
			System.ilayers[1].events.register("loadend", layersList[layersList.length-1], function() {
			    System.ilayers[1].setVisibility(false);
			});
		    }
		    \$.ajax({
			type: "GET",
			url: "./modules/timeline/display",
			complete: function(xml,status) {
		      	    \$(".ui-layout-center").append(xml.responseText);
			    \$("#timelineindexes_view_idx"+System.index).show();
			    \$.ajax({
				type: "GET",
				url: "./modules/timeline/init_js",
				complete: function(xml,status) {
			      	    \$("#timelineindexes_view_idx"+System.index).show();
				    eval(xml.responseText);
				}
			    });
			}
		    });
		}
	    });
	}
    });
}

#try
#if "c" in $inputs.keys()
#set context=$inputs["c"]["value"]
System.context="$context";
function loadContext(){
    var params=[{name: "name",value:arguments[0],dataType: "string"}];
    data=WPSGetHeader("context.loadContext")+WPSGetInputs(params)+WPSGetOutput({name:"Result"})+WPSGetFooter();
    System.hasTrace=false;
    $.ajax({
	type: "POST",
	url: System.zooUrl,
	contentType: 'text/xml',
	data: data,
	complete: function(xml,status) {
	    var tmp=$.parseJSON(xml.responseText);

	    for(i in map.layers)
		if(map.layers[i].real_name){
		    hasv=false;
		    for(j=0;j<tmp.layers.length;j++){
		        var tmp1=tmp.layers[j].replace("trac|","");
			var tmp2=tmp.layers[j].replace("index_","");
			if(tmp1!=tmp.layers[j] && !System.hasTrace){
			    loadTrace(tmp1);
			    System.hasTrace=true;
			}
			if(tmp2!=tmp.layers[j]){
			    \$("#index_id").val(tmp2);
			    System.index=tmp2;
			    System.limitLayer=layersList.length;
      			    System.doOnCurrentIndexChange=function(){loadIndex(System.index);};		
      			    setCurrentIndex(System.index);
			    //loadIndex();
			}
			if(tmp.layers[j]==map.layers[i].real_name){
			    map.layers[i].setVisibility(true);
			    hasv=true;
			}
		    }
		    if(!hasv)
			map.layers[i].setVisibility(false);
		}

	    var ext=tmp.ext.split(",");
	    var bounds = new OpenLayers.Bounds(
		ext[0], ext[1],
		ext[2], ext[3]
	    );
	    var proj=new OpenLayers.Projection("EPSG:4326");
	    map.zoomToExtent(bounds.transform(proj, map.getProjectionObject()));

        }
    });
    
}
#end if
#except
#pass
#end try

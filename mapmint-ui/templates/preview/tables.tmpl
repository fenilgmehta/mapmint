#import zoo

#attr mmenu0=[]

#encoding UTF-8
#extends PSkeleton_bs

#attr $mmodule = "tables-public"

#attr $ocss = []

#def istyles
#if not("senv" in $conf.keys()) or $conf["senv"]["loggedin"]!="true"
    <link rel="stylesheet" type="text/css" href="$conf["main"]["publicationUrl"]/assets/css/loginc.css"/>
    <link href="http://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic" rel="stylesheet" type="text/css">
    <link href="http://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css">
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
#end if
<link rel="stylesheet" type="text/css" href="$conf["main"]["publicationUrl"]/assets/css/font-mfizz.css"/>
#if "useCdn" in $conf["mm"].keys() and $conf["mm"]["useCdn"]=="true"
<!-- CDN DEPENDENCIES -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.8/css/jquery.dataTables.min.css"/>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/1.0.0/css/buttons.dataTables.min.css"/>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/colreorder/1.2.0/css/colReorder.dataTables.min.css"/>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/1.0.7/css/responsive.dataTables.min.css"/>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/select/1.0.0/css/select.dataTables.min.css"/>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.9/css/dataTables.bootstrap.min.css"/>
<!-- / CDN DEPENDENCIES -->
#else
<link rel="stylesheet" type="text/css" href="$conf["main"]["publicationUrl"]/assets/css/jquery.dataTables.min.css"/>
<link rel="stylesheet" type="text/css" href="$conf["main"]["publicationUrl"]/assets/css/buttons.dataTables.min.css"/>
<link rel="stylesheet" type="text/css" href="$conf["main"]["publicationUrl"]/assets/css/colReorder.dataTables.min.css"/>
<link rel="stylesheet" type="text/css" href="$conf["main"]["publicationUrl"]/assets/css/responsive.dataTables.min.css"/>
<link rel="stylesheet" type="text/css" href="$conf["main"]["publicationUrl"]/assets/css/select.dataTables.min.css"/>
<link rel="stylesheet" type="text/css" href="$conf["main"]["publicationUrl"]/assets/css/dataTables.bootstrap.min.css"/>
#end if
<link rel="stylesheet" href="$conf["main"]["publicationUrl"]/css/ol.css"/>
<link rel="stylesheet" href="$conf["main"]["publicationUrl"]/assets/css/bootstrap-colorpicker.min.css"/>
<link rel="stylesheet" type="text/css" href="$conf["main"]["publicationUrl"]/assets/css/fileinput.min.css"/>
<link rel="stylesheet" href="$conf["main"]["publicationUrl"]/css/mapmint-tables.css"/>
<link rel="stylesheet" href="$conf["main"]["publicationUrl"]/css/myTheme.css"/>
#end def


#def page_title
#set pid=$inputs["query"]["value"].split('/')
#import authenticate.service as auth
#set prefix=auth.getPrefix($conf)
#try
#set req="SELECT mm_tables.p_views.name,mm_tables.p_tables.description,mm_tables.p_tables.name,mm_tables.p_tables.id,mm_tables.p_views.clause FROM mm_tables.p_views,mm_tables.p_tables where mm_tables.p_tables.id=mm_tables.p_views.ptid and mm_tables.p_views.id="+$pid[0]
#set con=auth.getCon($conf)
#set cur=con.conn.cursor()
#set res=$cur.execute($req)
#set vals=$cur.fetchone()
$vals[0]
#except
$conf["identification"]["title"]: $zoo._("Tables management")
#end try
#end def

#set lurl=$conf["renv"]["REDIRECT_URL"]
#if $conf["renv"]["REDIRECT_URL"][len($conf["renv"]["REDIRECT_URL"])-1]!="/"
#set tmp=$conf["renv"]["REDIRECT_URL"].split("/")
#set lurl=("/".join(tmp[:len(tmp)-1]))+"/"
#end if

#def getAbstract()
#if $conf["identification"]["abstract"].count($conf["main"]["tmpUrl"])>0
#set f=open($conf["identification"]["abstract"].replace($conf["main"]["tmpUrl"],$conf["main"]["tmpPath"]),"rb")
              $f.read()
#else
              $conf["identification"]["abstract"].replace("[BR]","</p><p>")
#end if
#end def


#def mmenuleft
#set pid=$inputs["query"]["value"].split('/')

#import json
#import np.service as np
#import mm_access
#import authenticate.service as auth
#set con=auth.getCon($conf)
#set cur=con.conn.cursor()
#set prefix=auth.getPrefix($conf)

#set outputs1={"Result":{}}
#set tmp=np.list($conf,{"table":{"value":"themes"}},$outputs1)

#set lmenu=json.loads($outputs1["Result"]["value"])
#set groups=$conf["senv"]["group"].split(',')
#set groupClause=""
#for i in range(len(groups))
#if $groupClause!=""
#set $groupClause+=" OR "
#end if
#set $groupClause+="name=$q$"+groups[i]+"$q$"
#end for
#set c=$conf
#set $c["lenv"]["groupClause"]=$groupClause

#set req="select *,ARRAY(select id from mm.themes where id in (select tid from mm_tables.p_view_themes where vid=mm_tables.p_views.id)) as themes from mm_tables.p_views where id in (select distinct vid from mm_tables.p_view_groups where gid in (select id from mm.groups where "+$groupClause+")) and visible"

#set myReq="SELECT id,name,icon,(select name from mm.themes where id in (select tid from mm_tables.p_view_themes where vid="+$pid[0]+" limit 1)),(select color from mm.themes where id in (select tid from mm_tables.p_view_themes where vid="+$pid[0]+" limit 1))  from mm_tables.p_views where id in (select vid from mm_tables.p_view_themes where tid in (select tid from mm_tables.p_view_themes where vid="+$pid[0]+")) and id in (select distinct vid from mm_tables.p_view_groups where gid in (select id from mm.groups where "+$groupClause+")) and visible order by menu_order"

#set res1=$cur.execute($myReq)
#set res1=$cur.fetchall()

#set global lurl=$conf["renv"]["REDIRECT_URL"]
#if $conf["renv"]["REDIRECT_URL"][len($conf["renv"]["REDIRECT_URL"])-1]!="/"
#set tmp=$conf["renv"]["REDIRECT_URL"].split("/")
#set global lurl=("/".join(tmp[:len(tmp)-1]))+"/"
#end if

<!-- $res1 -->
#for i in range(len(res1))
#if $i==0
 <li style="background-color: #$res1[i][4]">
  <a id="none" href="#" role="tab" data-toggle="tab"  >$res1[i][3]</a>
 </li>
#end if
 <li>
  <a id="$res1[i][0]" href="$(lurl)$res1[i][0]" role="tab" data-toggle="tab" class="mmdatastore">
  <i class="fa fa-$res1[i][2]"> </i>
  $res1[i][1]
  </a>
 </li>
#end for

#end def

#def mmenu

#import json
#import np.service as np
#import mm_access
#import authenticate.service as auth
#set con=auth.getCon($conf)
#set cur=con.conn.cursor()
#set prefix=auth.getPrefix($conf)

#set outputs1={"Result":{}}
#set tmp=np.list($conf,{"table":{"value":"themes"}},$outputs1)

#set lmenu=json.loads($outputs1["Result"]["value"])

#set groups=$conf["senv"]["group"].split(',')
#set groupClause=""
#for i in range(len(groups))
#if $groupClause!=""
#set $groupClause+=" OR "
#end if
#set $groupClause+="name=$q$"+groups[i]+"$q$"
#end for
#set c=$conf
#set $c["lenv"]["groupClause"]=$groupClause
#set req="select *,ARRAY(select id from mm.themes where id in (select tid from mm_tables.p_view_themes where vid=mm_tables.p_views.id)) as themes from mm_tables.p_views where id in (select distinct vid from mm_tables.p_view_groups where gid in (select id from mm.groups where "+$groupClause+")) and visible order by menu_order"

#set res=$cur.execute($req)
#set res=$cur.fetchall()

#def findTheme(menu,id)
#for i in range(len(menu))
#if "id" in menu[i].keys() and menu[i]["id"]==$id
#if not("children" in menu[i].keys())
#set menu1=$menu
#set $menu1[i]["children"]=[]
#return $menu1[i]
#else
#return $menu[i]
#end if
#end if
#if "children" in menu[i].keys()
#set menu1=$menu[$i]
#set themeFound=findTheme(menu1["children"],id)
#if $themeFound is not None
#return $themeFound
#end if
#end if
#end for
#return None
#end def

#def appendMenu(menu,obj)
#for i in range(len($obj))
#for j in range(len($obj[i][len($obj[i])-1]))
#set elem=$findTheme(menu,$obj[i][len($obj[i])-1][j])
#set elem1=$elem
#if $elem1
#set $elem1["children"]+=[{"link":$obj[i][0],"text":$obj[i][2]}]
#end if
#end for

#end for
#end def


$appendMenu($lmenu,$res)

#set clevel=0

#set global lurl=$conf["renv"]["REDIRECT_URL"]
#if $conf["renv"]["REDIRECT_URL"][len($conf["renv"]["REDIRECT_URL"])-1]!="/"
#set tmp=$conf["renv"]["REDIRECT_URL"].split("/")
#set global lurl=("/".join(tmp[:len(tmp)-1]))+"/"
#end if

#def printLineO(lurl,level,obj)
#set levels=["first","second","third","forth"]
 <ul class="nav nav-$(levels[level])-level collapse in">
  <li>
   <a id="#if "id" in obj.keys()#$(obj["id"])#end if#" href="#if "link" in $obj.keys()#$(lurl)/$(obj["link"])#else#\##end if#" role="tab" data-toggle="tab" class="#if "link" in $obj.keys()#mmdatastore#end if#"> $obj["text"]</a>
#if "children" in $obj.keys()
#for i in range(len($obj["children"]))
    $printLine(lurl,level+1,$obj["children"][i])
#end for
#end if
  </li>
 </ul>
#end def

#def printLine4(lurl,level,obj)
#set levels=["first","second","third","forth"]
#if "children" in obj.keys() and len($obj["children"])>0
        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink$obj["id"]" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
           $obj["text"]
	</a>
        <div class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink$obj["id"]">
#for i in range(len($obj["children"]))
    $printLine(lurl,level+1,$obj["children"][i])
#end for
        </div>
#else
        <a class="dropdown-item" href="#if "link" in $obj.keys()#$(lurl)/$(obj["link"])#else#\##end if#"> $obj["text"]</a>
#end if
#*
 <ul class="nav nav-$(levels[level])-level collapse in">
  <li>
   <a id="#if "id" in obj.keys()#$(obj["id"])#end if#" href="#if "link" in $obj.keys()#$(lurl)/$(obj["link"])#else#\##end if#" role="tab" data-toggle="tab" class="#if "link" in $obj.keys()#mmdatastore#end if#"> $obj["text"]</a>
#if "children" in $obj.keys()
#for i in range(len($obj["children"]))
    $printLine(lurl,level+1,$obj["children"][i])
#end for
#end if
  </li>
 </ul>
*#
#end def

#def printLine(lurl,level,obj)
#set levels=["first","second","third","forth"]
#if "children" in obj.keys() and len($obj["children"])>0
    <li class="dropdown">
        <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownMenuLink$obj["id"]" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
           $obj["text"] <span class="caret"></span>
	</a>
        <ul class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink$obj["id"]">
#for i in range(len($obj["children"]))
    $printLine(lurl,level+1,$obj["children"][i])
#end for
        </ul>
	</li>
#else
	<li>
        <a class="dropdown-item" href="#if "link" in $obj.keys()#$(lurl)/$(obj["link"])#else#\##end if#"> $obj["text"]</a>
	</li>
#end if
#end def

#for i in range(len($lmenu))
#if $lmenu[i]['text']=="Menu"
#if "children" in $lmenu[i].keys()
#for j in range(len($lmenu[i]["children"]))
      <li class="nav-item dropdown">
     $printLine($conf["main"]["rootUrl"]+"tables",0,$lmenu[i]["children"][j])
      </li>
#end for
#end if
#end if
#end for

#end def

#def body

#import zoo

#set lurl=$conf["renv"]["REDIRECT_URL"]
#if $conf["renv"]["REDIRECT_URL"][len($conf["renv"]["REDIRECT_URL"])-1]!="/"
#set tmp=$conf["renv"]["REDIRECT_URL"].split("/")
#set lurl=("/".join(tmp[:len(tmp)-1]))+"/"
#end if

#import mm_access
#import authenticate.service as auth
#set con=auth.getCon($conf)
#set cur=con.conn.cursor()
#set prefix=auth.getPrefix($conf)

#if not("senv" in $conf.keys()) or $conf["senv"]["loggedin"]!="true"
<div class='notifications top-right'></div>


#if not("senv" in $conf.keys()) or $conf["senv"]["loggedin"]!="true"
#set req="SELECT content from mm.pages where title='login_index'"
#set res=$cur.execute($req)
#try
#set vals=$cur.fetchone()
$(Template($vals[0],searchList={"conf": $conf,"inputs": $inputs,"outputs":$outputs,"cur":$cur,"con":$con}))
#except Exception as e
<!-- $e -->
$getAbstract()
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/login_bs_body.html",searchList={"title":$zoo._("Tables management"),"hasHeader": False}))
#end try
#end if
#else
#if 'query' in $inputs.keys() and $inputs["query"]["value"]!=""

#from Cheetah.Template import Template

#set qComponents=$inputs["query"]["value"].split('/')

#if $qComponents[0]=="p"
#*$qComponents*#
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/pages/view.tmpl",searchList={"conf": $conf,"inputs": $inputs,"outputs":$outputs,"cur":$cur,"con":$con,"pid":$qComponents}))
#end if

#set c=$conf["lenv"]
#try
#set $c["cid"]=str(1+int($c["cid"]))
#except
#set $c["cid"]="0"
#end try
#if len($qComponents)==1
#*
 In case we want a table list
*#
#try
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/tables/list.tmpl",searchList={"conf": $conf,"cur":$cur,"con":$con,"qComponents":$qComponents}))
#except Exception as e
$getAbstract()
<div class="alert alert-danger">
#import traceback
$zoo._("An error occured: ")<code>$e</code> <span><input type="checkbox" onchange="if(\$(this).is(':checked'))\$(this).next().show();else \$(this).next().hide();" /><div><code>$traceback.format_exc()</code></div></span>
</div>
#end try
#else
#if $qComponents[1]=="edit"
#*
 In case we want to edit / add an element
*#
#set inputs0={"dataStore":{"value":$conf["main"]["dbuserName"]},"no-header":{"value":"true"},"table":{"value":"toto"}}	
#if len($qComponents)>2
#set $inputs0["id"]={"value":$qComponents[2]}
#end if
#set outputs0={"Result":{"value":""}}
$(Template(file=$conf["main"]["templatesPath"]+"/preview/modules/tables/edit.tmpl",searchList={"conf": $conf,"inputs": $inputs0,"outputs":$outputs0,"cur":$cur,"con":$con}))
#end if
#end if
#else
<div class='notifications top-right'></div>
#import authenticate.service as auth
#set con=auth.getCon($conf)
#set cur=con.conn.cursor()
#set prefix=auth.getPrefix($conf)
#set req1="SELECT content from "+$prefix+"pages where title='tables_index'"
#try
#set res=cur.execute($req1)
#set vals=$cur.fetchone()
#if vals is not None
#try
$(Template($vals[0],searchList={"conf": $conf,"inputs": $inputs,"outputs":$outputs,"cur":$cur,"con":$con}))
#except Exception as e
$e
#end try
#else
$getAbstract()
#end if
#except
$getAbstract()
#end try
#if not("senv" in $conf.keys()) or $conf["senv"]["loggedin"]!="true"
#from Cheetah.Template import Template
$(Template(file=$conf["main"]["templatesPath"]+"/login_bs_body.html",searchList={"title":$zoo._("Tables management"),"hasHeader": False}))
#end if
#end if
#end if
#end def


#import zoo
#from Cheetah.Template import Template
#try
#set embeddedNb=$cid
#except
#try
#set $embeddedNb+=1
#except
#set embeddedNb=0
#end try
#end try

#try
#set csenv=int($conf["senv"]["embedded_cnt"])
#set c=$conf["senv"]
#set $c["embedded_cnt"]=str($csenv+1+int($inputs["id"]["value"]))
#set embeddedNb=int($c["embedded_cnt"])
#except
#try
#set c=$conf["senv"]
#set $c["embedded_cnt"]=1
#except
#set embeddedNb=1
#end try
#end try
<!-- EBNB $embeddedNb -->


#set alreadyDisplayed={}

#set tmpl=$conf['main']['templatesPath']+"/Distiller/form_line.html"
#include $tmpl
#set ftmpl=$self._CHEETAH__cheetahIncludes[$tmpl]

#if "isHistory" in $inputs.keys() and $inputs["isHistory"]["value"]=="true"
#set isH=True
#else
#set isH=False
#end if

#if "isImport" in $inputs.keys() and $inputs["isImport"]["value"]=="true"
#set isImport=True
#else
#set isImport=False
#end if


#set req="SELECT distinct mm_tables.p_editions.name,mm_tables.p_editions.step,mm_tables.p_editions.ptid,mm_tables.p_editions.id,mm_tables.p_editions.description FROM mm_tables.p_editions,mm.groups,mm_tables.p_edition_groups where mm.groups.id=mm_tables.p_edition_groups.gid and mm.groups.id in (SELECT mm.groups.id from mm.groups,mm.user_group where mm.groups.id=mm.user_group.id_group and mm.user_group.id_user='"+$conf["senv"]["id"]+"') and mm_tables.p_editions.id="+$inputs["id"]["value"]
#set res=$cur.execute($req)
#set vals=$cur.fetchone()
#set tblId=vals[2]
#set editId=vals[3]
#set step=vals[1]

#import json
#set dependents=[]
#set dependentFields=[]

<div id="mm_table_editor_form">
<div class="table_description">
#if $vals[4] is not None and $vals[4].count('(_')>0 and $vals[4].count('_)')>0
#if $step==-1
#set isOptional=True
#else
#set isOptional=False
#end if


#set step=$vals[1]

#set description=$vals[4]

#set req="SELECT mm_tables.p_edition_fields.id,mm_tables.p_edition_fields.name,mm_tables.p_edition_fields.alias,mm_tables.p_edition_fields.value,mm_tables.p_edition_fields.edition,(select code from mm_tables.ftypes where id=mm_tables.p_edition_fields.ftype),mm_tables.p_edition_fields.dependencies FROM mm_tables.p_editions,mm_tables.p_edition_fields where mm_tables.p_editions.id=mm_tables.p_edition_fields.eid and mm_tables.p_editions.id="+$inputs["id"]["value"]
#set res=$cur.execute($req)
#set vals=$cur.fetchall()

#set req="select code from mm_tables.ftypes where ftype='e' order by id asc;"
#set res=$cur.execute($req)
#set codes=$cur.fetchall()

#try
#for i in range(len($vals))
#if not($vals[i][1] in $alreadyDisplayed.keys())
#set ctype=$vals[i][5]
#if $description.count("(_"+$vals[i][1]+"_)")>0
#set $alreadyDisplayed[$vals[i][1]]=True
#end if
<!--
LOG
$ctype
$vals[i][1]
-->

#if ctype=="ref" 
#*
 In case it is a select list
*#
#set res1=$cur.execute($vals[i][3])
#try
#set vals1=$cur.fetchall()
#set options=[]
#for j in range(len(vals1))
#set $options+=[vals1[j]]
#end for
#except Exception as e
#set options=[["-1",$zoo._("No element")]]
#end try
#set tmpDisplay=$ftmpl.printEmbeddedLine({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"type":"select","options":$options,"optional":$isOptional})
#else
#if ctype=="date" or ctype=="datetime" or ctype=="float"
#*
 In case it is a date
*#
#set tmpDisplay=$ftmpl.printEmbeddedLine({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"value":$vals[i][3],"type":$ctype,"optional":$isOptional})
#else
#*
 In case it HTML
*#
#if $ctype=="html"
#set tmpDisplay=$ftmpl.printEmbeddedLine({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"value":$vals[i][3],"type":$ctype,"optional":$isOptional})
#else
#set tmpDisplay=$ftmpl.printEmbeddedLine({"noline":True,"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"value":$vals[i][3],"optional":$isOptional})
#end if
#end if
#end if
#end if


#set $description=$description.replace("(_"+$vals[i][1]+"_)",tmpDisplay)
#end for
#except Exception as e
<h2>$e</h2>
#end try
<!-- MM Edition template -->
$description
#else
$vals[4]
#end if
</div>
#if not($isH)

#if $step==-1
#set isOptional=True
#else
#set isOptional=False
#end if

#if "header" in $inputs.keys()
<h2>$vals[0]</h2>
#if "HTTP_REFERER" in $conf["renv"].keys()
<a href="$conf["renv"]["HTTP_REFERER"]">$zoo._("Back")</a>
#end if
#end if
#set step=$vals[1]

#set req="SELECT mm_tables.p_edition_fields.id,mm_tables.p_edition_fields.name,mm_tables.p_edition_fields.alias,mm_tables.p_edition_fields.value,mm_tables.p_edition_fields.edition,(select code from mm_tables.ftypes where id=mm_tables.p_edition_fields.ftype),mm_tables.p_edition_fields.dependencies FROM mm_tables.p_editions,mm_tables.p_edition_fields where mm_tables.p_editions.id=mm_tables.p_edition_fields.eid and mm_tables.p_editions.id="+$inputs["id"]["value"]
#set res=$cur.execute($req)
#set vals=$cur.fetchall()

#set req="select code from mm_tables.ftypes where ftype='e' order by id asc;"
#set res=$cur.execute($req)
#set codes=$cur.fetchall()

#if $isImport
 <input type="hidden" name="columnNames" value ="#for i in range(len($vals))#$vals[i][2]#if i+1<len($vals)#,#end if##end for#" />
 <ul class="list-inline inline">
  <li>$zoo._("Column names:")</li>
#end if
#for i in range(len($vals))
#if $isImport
 <li>$vals[i][2]</li>
#if $i+1 == len($vals)
 </ul>
#end if
#else
#if not($vals[i][1] in $alreadyDisplayed.keys())
#*list($alreadyDisplayed.keys()).count($vals[i][1])
#while $vals[i][1] in $alreadyDisplayed.keys()
#set $i+=1
#end while*#
#try

#set ctype=$vals[i][5]

#*
  In case mm_tables.p_edition_fields.edition is true
*#
#if $vals[i][4]

#if $vals[i][6] is not None and $vals[i][6]!=''
$ftmpl.printHiddenContent({"rid":"runFirst_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"value":$vals[i][6],"optional":$isOptional})
#end if

#*
 $ctype=="text" or $ctype=="varchar(255)" or $ctype=="html" or $ctype=="geometry" 
 *#
#if $ctype=="text" or $ctype=="varchar(255)" or $ctype=="html" or $ctype=="geometry" 
#*
 $ctype=="geometry" 
 *#
#if $ctype=="geometry"
#set tmpReq="select name from mm_tables.p_tables where id="+str($tblId)
#set res0=$cur.execute($tmpReq)
#set tmpVals=$cur.fetchone()
#set schemaTable=$tmpVals[0].split(".")

#set tmpReq="SELECT type from geometry_columns where f_table_schema='"+$schemaTable[0]+"' and f_table_name='"+$schemaTable[1]+"'"
#set res0=$cur.execute($tmpReq)
#set toto=$cur.fetchone()
#if $toto[0]=='POINT'
$ftmpl.printCoordInput({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"value":$vals[i][3],"type":$ctype,"optional":$isOptional})
#else
$ftmpl.printHidden({"rid":"edit_"+str($vals[i][0])+"_geotype","id":"edit_"+str($vals[i][0])+"_geotype","name":$vals[i][2],"value":$toto[0],"optional":$isOptional})

#set options=[["layer",$zoo._("Use an existing geometry")],["draw",$zoo._("Draw a geometry on map")]]

$ftmpl.printLine({"rid":"edition_"+str($vals[i][1])+"_mmtype","id":"edit_"+str($vals[i][0])+"_mmtype","name":$vals[i][2]+'<input type="checkbox" name="edit_'+str($vals[i][0])+'_mmcheck" onchange="console.log($(this).prop(\'checked\'));if($(this).prop(\'checked\')){$(this).parent().next().find(\'select\').change();$(this).parent().next().show();$(this).parent().parent().next().show();}else{$(this).parent().next().hide();$(this).parent().parent().next().hide();}" />',"type":"select","options":$options,"optional":$isOptional})

$ftmpl.printLine({"rid":"edition_"+str($vals[i][1])+"_mmlayer","id":"edit_"+str($vals[i][0])+"_mmlayer","name":"","type":"select","options":[[-1,$zoo._("Please first create feature.")]],"optional":$isOptional})

<script name="edition_$(vals[i][1])" type="application/javascript" id="geometryField_runFirst">
try{
  console.log("geometryFields",geometryFields);
}catch(e){
  geometryFields=[];
}
if(geometryFields.indexOf("edit_$vals[i][0]")<0)
geometryFields.push("edit_$vals[i][0]");
console.log("***************** GEOMETRY *****************");
try{
  \$("#edit_$(vals[i][0])_type").off("change");
  \$("#edit_$(vals[i][0])_type").change(function(){
    console.log("CHANGE TO DRAW ?");
  });
}catch(e){
  console.log();
}
console.log("***************** GEOMETRY *****************");
</script>

#end if


#else
#*
 In case it is a long text content
*#
#if $ctype=="html"
$ftmpl.printLine({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"value":$vals[i][3],"type":$ctype,"optional":$isOptional})
#else
$ftmpl.printLine({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"value":$vals[i][3],"type":"textarea","optional":$isOptional})
#end if
#end if
#*
 / $ctype=="geometry" 
 *#
#else
#*
  $ctype=="bytea" 
 *#
#if ctype=="bytea"
$ftmpl.printBasicLine({"label":$vals[i][2],"content":$ftmpl.printUploadInputNew({"id":"edit_"+str($vals[i][0]),"name":"edition_"+str($vals[i][1])})})
#else
#if ctype=="tbl_linked" 
#*
 In case it is a multiple select list
*#
#set components=str($vals[i][3]).split(";")
#set req=$components[len(components)-1]
#set res1=$cur.execute($req)
#try
#set vals1=$cur.fetchall()
#set options=[]
#for j in range(len(vals1))
#set $options+=[vals1[j]]
#end for
#except Exception as e
#set options=[["-1",$zoo._("No element")]]
#end try
$ftmpl.printLine({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"type":"multiple","options":$options,"optional":$isOptional})
#else
#if ctype=="ref" 
#*
 In case it is a select list
*#
#set res1=$cur.execute($vals[i][3])
#try
#set vals1=$cur.fetchall()
#set options=[]
#for j in range(len(vals1))
#set $options+=[vals1[j]]
#end for
#except Exception as e
#set options=[["-1",$zoo._("No element")]]
#end try
$ftmpl.printLine({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"type":"select","options":$options,"optional":$isOptional})
#else
#if ctype=="date" or ctype=="datetime" or ctype=="float"
#*
 In case it is a date
*#
$ftmpl.printLine({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"value":$vals[i][3],"type":$ctype,"optional":$isOptional})
#else
#if ctype=="link"
#*
 In case it is a linked table (link)
*#
#set components=$vals[i][3].split(";")
#import psycopg2
#from psycopg2.extensions import *
#set req="SELECT mm_tables.p_views.id from mm_tables.p_views,mm_tables.p_tables where mm_tables.p_views.ptid=mm_tables.p_tables.id AND mm_tables.p_tables.name="+str(adapt($components[1]))
#set res=$cur.execute($req)
#set lvals=$cur.fetchone()
#try
#set toto=$ftmpl.printBasicCheckbox()

#try
#set csenv=int($conf["senv"]["embedded_cnt"])
#set c=$conf["senv"]
#set $c["embedded_cnt"]=str($csenv+1)
#set embeddedNb=int($c["embedded_cnt"])
#except
#try
#set c=$conf["senv"]
#set $c["embedded_cnt"]=1
#except
#set embeddedNb=1
#end try
#end try

#set content=Template(file=$conf["main"]["templatesPath"]+"/preview/modules/tables/list.tmpl",searchList={"conf": $conf,"cur":$cur,"qComponents":[str(lvals[0])],"embedded":$embeddedNb,"con":$con,"rLevel":$cLevel+1})

#set $embeddedNb+=1
#except Exception as e
<div class="alert alert-danger">$e</div>
#set content="<div class='alert alert-danger'>"+str($e)+"</div>"
#end try
#set preTitle='<input type="hidden" name="embedded_'+str($embeddedNb-1)+'_link_col" value="'+$components[0]+'"/>'
#try 
#set $preTitle+=$toto
#except Exception as e
#set noTitle=True
#set $preTitle+=str($e)
#end try

#try
$ftmpl.printBasicLine({"label":$preTitle+$vals[i][2],"content":$content})
#except Exception as e
<div class="alert alert-danger">$e</div>
#try
$preTitle
#except Exception as e
$e
#end try
#try
$content
#except Exception as e
$e
#end try
#end try
<!--
$vals[i]
$lvals
-->
#else
#if ctype=="tbl_link"
#set components=$vals[i][3].split(";")
#import psycopg2
#from psycopg2.extensions import *
#set req="SELECT mm_tables.p_views.id from mm_tables.p_views,mm_tables.p_tables where mm_tables.p_views.ptid=mm_tables.p_tables.id AND mm_tables.p_tables.name="+str(adapt($components[2]))
#set res=$cur.execute($req)
#set lvals=$cur.fetchone()
#try
#set content=Template(file=$conf["main"]["templatesPath"]+"/preview/modules/tables/list.tmpl",searchList={"conf": $conf,"cur":$cur,"qComponents":[str(lvals[0])],"embedded":$embeddedNb,"isPreInput": True,"con":$con,"rLevel":$cLevel+1})
#set $embeddedNb+=1
#except Exception as e
<div class="alert alert-danger">$e</div>
#end try
#set preTitle='<input type="hidden" name="embedded_'+str($embeddedNb-1)+'_link_col" value="'+$components[0]+'"/>'
$ftmpl.printBasicLine({"label":$preTitle+$vals[i][2],"content":$content})
#else
#if ctype=="tbl_list"
#import psycopg2
#from psycopg2.extensions import *
#set req="SELECT mm_tables.p_views.id from mm_tables.p_views,mm_tables.p_tables where mm_tables.p_views.ptid=mm_tables.p_tables.id AND mm_tables.p_tables.name="+str(adapt($vals[i][3]))
#set res=$cur.execute($req)
#set lvals=$cur.fetchone()
#try
#set content=Template(file=$conf["main"]["templatesPath"]+"/preview/modules/tables/list.tmpl",searchList={"conf": $conf,"cur":$cur,"qComponents":[str(lvals[0])],"embedded":$embeddedNb,"isInput":True,"con":$con,"rLevel":$cLevel+1})
#set $embeddedNb+=1
#except Exception as e
<div class="alert alert-danger">$e</div>
#end try
#set preTitle='<input type="hidden" name="input_'+str($embeddedNb-1)+'_embedded_'+str($embeddedNb-1)+'_link_col" value="'+$vals[i][1]+'"/><input type="hidden" name="input_'+str($embeddedNb-1)+'_embedded_'+str($embeddedNb-1)+'_link_val" value="-1"/>'
$ftmpl.printBasicLine({"label":$preTitle+$vals[i][2].title(),"content":$content})
#else
#if $ctype=="boolean"
#try
#set toto=eval($vals[i][6])
#set originalI=$i
#set content=""
#for kk in range($toto[0]["main_cnt"])
#set $content+=$ftmpl.printLine({"rid":"edition_"+str($vals[i+kk][1]),"id":"edit_"+str($vals[i+kk][0]),"name":$vals[i+kk][2],"type":"checkbox","value":$vals[i+kk][3],"optional":$isOptional})
#set $alreadyDisplayed[str($vals[i+kk][1])]=True
#end for
$ftmpl.printBasicLine({"label":$toto[0]["main_title"],"content":$content})
#except Exception as e
<!-- $e -->
$ftmpl.printLine({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"type":"checkbox","value":$vals[i][3],"optional":$isOptional})
#end try
<!-- $vals[i] -->
#else
#if ctype=="varchar(32)"
#* Password *#
$ftmpl.printLine({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"value":$vals[i][3],"optional":True,"isPassword":True,"type":"password"})
#else
#*
 In other cases
*#
$ftmpl.printLine({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"value":$vals[i][3],"optional":$isOptional})
#end if
#end if
#end if
#end if
#end if
#end if
#end if
#end if
#end if
#end if
#else
#*
  In case mm_tables.p_edition_fields.edition is false
*#
#set lvalue=$vals[i][3]

#if $lvalue.count("[_")

#*
  Create an array containing the values
*#
#set allValues=$lvalue.split("[_")
#set fvalues=[]
#for a in range(len($allValues))
#if $allValues[a].count("_]")>0
#try
#set t=$Template($allValues[a].replace("_]",""),searchList=$searchList())
#set $fvalues+=[unicode($t)]
#except Exception as e
<div class="alert alert-danger">$zoo._("Unable to handle your SQL query: ")$e</div>
#end try
#else
#set $fvalues+=[$allValues[a]]
#end if
#end for
#set lvalue="".join($fvalues)
#end if
$ftmpl.printHiddenContent({"rid":"edition_"+str($vals[i][1]),"id":"edit_"+str($vals[i][0]),"name":$vals[i][2],"value":$lvalue,"optional":$isOptional})

#end if

#except Exception as e
#try
#set res=$con.conn.commit()
#except
continue
#end try
<div class="alert alert-danger">
$zoo._("Unable to display your form. Please, check your configuration.")
<code>
$e
</code>
#import traceback
<span><input type="checkbox" onchange="if(\$(this).is(':checked'))\$(this).next().show();else \$(this).next().hide();" /><div><code>$traceback.format_exc()</code></div></span>
</div>
#end try

#end if

#end if
#end for


#end if

#try

$ftmpl.printHidden({"rid":"edition_uid","id":"edit_uid","name":"edit_uidName","value":$conf["senv"]["id"]})

#if $step<0
#if $step==-2
$ftmpl.printButton({"id":"delete","name":$zoo._("Delete")})
#else

#if $step==-3

$ftmpl.printLine({"rid":"import_mmlayer","id":"edit_"+str($editId)+"_mmlayer","name":$zoo._("Layer"),"type":"select","options":[[-1,$zoo._("Please first create feature.")]],"optional":$isOptional})

<script name="edition_$(editId)" type="application/javascript" id="geometryField_runFirst">
try{
  console.log("geometryFields",geometryFields);
}catch(e){
  geometryFields=[];
}
if(geometryFields.indexOf("edit_$editId")<0)
geometryFields.push("edit_$editId");
console.log("***************** GEOMETRY *****************");
try{
  \$("#edit_$(vals[i][0])_type").off("change");
  \$("#edit_$(vals[i][0])_type").change(function(){
    console.log("CHANGE TO DRAW ?");
  });
}catch(e){
  console.log();
}
console.log("***************** GEOMETRY *****************");
</script>

$ftmpl.printButton({"id":"import1","name":$zoo._("Import")})
#end if

#if $step!=-10 and $step!=-3 

#set opts=[$zoo._("OR"),$zoo._("AND")]
$ftmpl.printLine({"rid":"edition_linkClause","id":"edit_linkClause","name":$zoo._("Link clauses with"),"value":$vals[i][3],"optional":False,"type":"select","options":opts})

$ftmpl.printButton({"id":"search","name":$zoo._("Search")})

<script type="template/text" id="filter_complete_template">
<div id="filter_[id]" class="alert alert-[type] col-sm-3">
       <button type="button" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button>
       <strong><i class="fa fa-filter" aria-hidden="true"></i> $zoo._("Filter ")[cid]</strong>  [body]
</div>
</script>

<script type="template/text" id="filter_line_template">
  <span class="label label-info">[line]</span>
</script>

#end if
#end if
#else
$ftmpl.printButton({"id":"save","name":$zoo._("Save")})
#end if

</div>
$ftmpl.printHidden({"rid":"edition_table_id","id":"edit_table_id","name":"table_id","value":$tblId})
$ftmpl.printHidden({"rid":"edition_edition_id","id":"edit_edition_id","name":"edition_id","value":$editId})

#if ("isReference" in $inputs.keys() and $inputs["isReference"]["value"]=="true") or $isImport
$ftmpl.printHidden({"rid":"edition_tuple_id","id":"edit_tuple_id","name":"table_id","value":"-1"})
#end if

#except Exception as e
<div class="alert alert-danger">
$zoo._("Unable to display your form. Please, check your configuration.")
<code>
$e
</code>
#import traceback
<span><input type="checkbox" onchange="if(\$(this).is(':checked'))\$(this).next().show();else \$(this).next().hide();" /><div><code>$traceback.format_exc()</code></div></span>
</div>
#end try

